from collections import (
    deque,
)


def my_range_list(number_of_items):
    items = []
    start = 0
    
    while start < number_of_items:
        items.append(start)
        start += 1
        
    return items


def my_range_generator(number_of_items):
    start = 0
    
    while start < number_of_items:
        yield start
        
        start += 1
        
def fib(
    n,
):
    '''
    Find the first n items of the fibonacci sequence
    '''
    
    cur, nxt = 0, 1
    idx = 0
    # output = []
    
    while idx < n:
        cur, nxt = nxt, cur + nxt
        idx += 1
        
        yield cur
        # output.append(cur)
    
    # return output
    
    
    # For inputs (1, 7, 2) return [1, 3, 5] as a generator
def ronald_range(
    start,
    end,
    step,
):
    '''
    Create a generator for the items starting at "start" (inclusive) and ending at "end" exclusive, incrementing by step
    '''
    
    while end > start:
        yield start
        
        start += step
        
        
def lucas_numbers(
    n,
):
    '''
    Generate the first n Lucas Numbers
    
    The Lucas Numbers are similar to the fibonacci numbers, however the first 2 outputs are 
    2 and 3
    '''
    
    cur, nxt = 1, 2
    idx = 0
    
    while idx < n:
        cur, nxt = nxt, cur + nxt
        idx +=1
        
        yield cur
    
    
class LinkedList:
    def __init__(
        self,
        value,
        nxt,
    ):
        self.value = value
        self.nxt = nxt
    
    def __str__(
        self,
    ):
        '''
        This is how you print out the object representation
        '''
        
        return '({value}) -> '.format(
            value=self.value,
        )
   
    def __iter__(
        self,
    ):
        '''
        This is how you define how to iterate over your object
        
        This is a generator function, just like the others we have written
        '''
        
        cur = self
        
        while cur:
            yield cur
            
            cur = cur.nxt
        
   
class BinaryTree:
    def __init__(
        self,
        value,
        left,
        right,
    ):
        self.value = value
        self.left = left
        self.right = right
        
    def __str__(
        self,
    ):
        return str(self.value)
    
    def __iter__(
        self,
    ):
        '''
        Iterate through the binary tree using the Depth First Search Strategy
        '''
        
        traversed = deque(
            [self],
        )
        
        while traversed:    
            cur = traversed.popleft()
            yield cur
            
            if cur.right:
                traversed.appendleft(cur.right)
                
            if cur.left:
                traversed.appendleft(cur.left)
        

def dfs(
    root,
):
    '''
    Depth first search generator
    '''
    
    traversed = deque(
        [root] if root else []
    )
    
    while traversed:
        cur = traversed.popleft()
        yield cur
        
        if cur.right:
            traversed.appendleft(cur.right)
            
        if cur.left:
            traversed.appendleft(cur.left)
            
my_tree = BinaryTree(1, 
                     BinaryTree(2,
                                BinaryTree(3, None, None),
                                BinaryTree(4, None, None),
                               ),
                     BinaryTree(5,
                                None,
                                BinaryTree(6, None, None),
                               ),
                    )

'''
            1
           / \
          2   5
         / \   \
        3   4   6
'''

for node in my_tree:
    print (node)
